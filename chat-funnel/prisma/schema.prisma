generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.png"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id() @default(autoincrement())
  email       String        @unique
  name        String
  password    String
  isVerified  Boolean       @default(false)
  role        UserRole
  company     Company       @relation(fields: [companyId], references: [id])
  companyId   Int
  tickets     Ticket[]
  contacts    UserContact[]
  departments Department[]

  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

enum UserRole {
  COMPANY_ADMIN
  COMPANY_STAFF
}

model Company {
  id          Int          @id() @default(autoincrement())
  users       User[]
  departments Department[]
  devices     Device[]
  automations Automation[]

  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model Department {
  id        Int      @id() @default(autoincrement())
  name      String
  color     String
  funnels   Funnel[]
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
  users     User[]

  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model Funnel {
  id           Int          @id() @default(autoincrement())
  name         String
  color        String
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId Int
  automations  Automation[]

  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model WAServer {
  id      Int      @id @default(autoincrement())
  url     String
  devices Device[]
}

model Device {
  id              Int      @id() @default(autoincrement())
  isActive        Boolean  @default(false)
  phoneNumber     String
  company         Company  @relation(fields: [companyId], references: [id])
  companyId       Int
  whastsappServer WAServer @relation(fields: [wAServerId], references: [id])
  wAServerId      Int
  tickets         Ticket[]

  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model Automation {
  id        Int                @id @default(autoincrement())
  name      String
  company   Company            @relation(fields: [companyId], references: [id])
  companyId Int
  funnels   Funnel[]
  scripts   AutomationScript[]

  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model AutomationScript {
  id            Int        @id @default(autoincrement())
  message       String
  delayDuration Int // In seconds
  automation    Automation @relation(fields: [automationId], references: [id])
  automationId  Int

  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model Contact {
  id            Int           @id @default(autoincrement())
  name          String
  profileImgURL String
  phoneNumber   String
  tickets       Ticket[]
  users         UserContact[] @ignore

  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model UserContact {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@unique([userId, contactId])
}

enum TicketStatus {
  OPEN
  CLOSED
}

model Ticket {
  id         Int          @id @default(autoincrement())
  assignee   User         @relation(fields: [assigneeId], references: [id])
  assigneeId Int
  status     TicketStatus @default(OPEN)
  contact    Contact      @relation(fields: [contactId], references: [id])
  contactId  Int
  device     Device       @relation(fields: [deviceId], references: [id])
  deviceId   Int
  messages   Message[]

  updatedAt DateTime  @default(now())
  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model Message {
  id           Int       @id @default(autoincrement())
  ticket       Ticket    @relation(fields: [ticketId], references: [id])
  ticketId     Int
  senderId     Int // Could be `User` or `Contact`
  receiverId   Int // Could be `User` or `Contact`
  fromCustomer Boolean
  hasRead      Boolean   @default(false)
  readAt       DateTime?
  sentAt       DateTime
  content      String
}
